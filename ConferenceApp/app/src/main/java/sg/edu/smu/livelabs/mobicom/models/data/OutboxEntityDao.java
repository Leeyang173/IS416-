package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OUTBOX_ENTITY".
*/
public class OutboxEntityDao extends AbstractDao<OutboxEntity, Long> {

    public static final String TABLENAME = "OUTBOX_ENTITY";

    /**
     * Properties of entity OutboxEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventId = new Property(1, Long.class, "eventId", false, "EVENT_ID");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property DateTime = new Property(3, java.util.Date.class, "DateTime", false, "DATE_TIME");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Read = new Property(6, Boolean.class, "read", false, "READ");
    };


    public OutboxEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OutboxEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OUTBOX_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EVENT_ID\" INTEGER," + // 1: eventId
                "\"TIME\" INTEGER," + // 2: time
                "\"DATE_TIME\" INTEGER," + // 3: DateTime
                "\"TITLE\" TEXT," + // 4: title
                "\"MESSAGE\" TEXT," + // 5: message
                "\"READ\" INTEGER);"); // 6: read
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_OUTBOX_ENTITY_EVENT_ID ON OUTBOX_ENTITY" +
                " (\"EVENT_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_OUTBOX_ENTITY_DATE_TIME ON OUTBOX_ENTITY" +
                " (\"DATE_TIME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OUTBOX_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OutboxEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        java.util.Date DateTime = entity.getDateTime();
        if (DateTime != null) {
            stmt.bindLong(4, DateTime.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(7, read ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OutboxEntity readEntity(Cursor cursor, int offset) {
        OutboxEntity entity = new OutboxEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // DateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // read
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OutboxEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRead(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OutboxEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OutboxEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
