package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.GameEventEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_EVENT_ENTITY".
*/
public class GameEventEntityDao extends AbstractDao<GameEventEntity, Long> {

    public static final String TABLENAME = "GAME_EVENT_ENTITY";

    /**
     * Properties of entity GameEventEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property GameId = new Property(1, Long.class, "gameId", false, "GAME_ID");
        public final static Property EventServerID = new Property(2, Long.class, "eventServerID", false, "EVENT_SERVER_ID");
        public final static Property KeyWork = new Property(3, String.class, "keyWork", false, "KEY_WORK");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
    };


    public GameEventEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GameEventEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_EVENT_ENTITY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"GAME_ID\" INTEGER," + // 1: gameId
                "\"EVENT_SERVER_ID\" INTEGER," + // 2: eventServerID
                "\"KEY_WORK\" TEXT," + // 3: keyWork
                "\"IMAGE\" TEXT);"); // 4: image
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GAME_EVENT_ENTITY_EVENT_SERVER_ID ON GAME_EVENT_ENTITY" +
                " (\"EVENT_SERVER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_EVENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameEventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindLong(2, gameId);
        }
 
        Long eventServerID = entity.getEventServerID();
        if (eventServerID != null) {
            stmt.bindLong(3, eventServerID);
        }
 
        String keyWork = entity.getKeyWork();
        if (keyWork != null) {
            stmt.bindString(4, keyWork);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameEventEntity readEntity(Cursor cursor, int offset) {
        GameEventEntity entity = new GameEventEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // gameId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // eventServerID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // keyWork
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameEventEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEventServerID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setKeyWork(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameEventEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameEventEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
