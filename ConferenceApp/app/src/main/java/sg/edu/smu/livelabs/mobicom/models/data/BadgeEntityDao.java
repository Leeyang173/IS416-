package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.BadgeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BADGE_ENTITY".
*/
public class BadgeEntityDao extends AbstractDao<BadgeEntity, Long> {

    public static final String TABLENAME = "BADGE_ENTITY";

    /**
     * Properties of entity BadgeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Badges = new Property(1, String.class, "badges", false, "BADGES");
        public final static Property Max = new Property(2, Integer.class, "max", false, "MAX");
        public final static Property CountAchieved = new Property(3, Integer.class, "countAchieved", false, "COUNT_ACHIEVED");
        public final static Property Keyword = new Property(4, String.class, "keyword", false, "KEYWORD");
        public final static Property BadgesType = new Property(5, Integer.class, "badgesType", false, "BADGES_TYPE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property GameId = new Property(7, Integer.class, "gameId", false, "GAME_ID");
        public final static Property ImageId = new Property(8, String.class, "imageId", false, "IMAGE_ID");
        public final static Property PlayNow = new Property(9, String.class, "playNow", false, "PLAY_NOW");
        public final static Property LastUpdated = new Property(10, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    };


    public BadgeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BadgeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BADGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"BADGES\" TEXT," + // 1: badges
                "\"MAX\" INTEGER," + // 2: max
                "\"COUNT_ACHIEVED\" INTEGER," + // 3: countAchieved
                "\"KEYWORD\" TEXT," + // 4: keyword
                "\"BADGES_TYPE\" INTEGER," + // 5: badgesType
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"GAME_ID\" INTEGER," + // 7: gameId
                "\"IMAGE_ID\" TEXT," + // 8: imageId
                "\"PLAY_NOW\" TEXT," + // 9: playNow
                "\"LAST_UPDATED\" INTEGER);"); // 10: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BADGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BadgeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String badges = entity.getBadges();
        if (badges != null) {
            stmt.bindString(2, badges);
        }
 
        Integer max = entity.getMax();
        if (max != null) {
            stmt.bindLong(3, max);
        }
 
        Integer countAchieved = entity.getCountAchieved();
        if (countAchieved != null) {
            stmt.bindLong(4, countAchieved);
        }
 
        String keyword = entity.getKeyword();
        if (keyword != null) {
            stmt.bindString(5, keyword);
        }
 
        Integer badgesType = entity.getBadgesType();
        if (badgesType != null) {
            stmt.bindLong(6, badgesType);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        Integer gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindLong(8, gameId);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(9, imageId);
        }
 
        String playNow = entity.getPlayNow();
        if (playNow != null) {
            stmt.bindString(10, playNow);
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(11, lastUpdated.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BadgeEntity readEntity(Cursor cursor, int offset) {
        BadgeEntity entity = new BadgeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // badges
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // max
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // countAchieved
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keyword
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // badgesType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // gameId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imageId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // playNow
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // lastUpdated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BadgeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBadges(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMax(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCountAchieved(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setKeyword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBadgesType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGameId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setImageId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlayNow(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastUpdated(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BadgeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BadgeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
