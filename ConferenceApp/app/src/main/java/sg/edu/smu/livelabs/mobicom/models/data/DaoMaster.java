package sg.edu.smu.livelabs.mobicom.models.data;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import sg.edu.smu.livelabs.mobicom.models.data.EventEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.GameEventEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.PaperEventEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.CommentEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.TopicEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.AttendeeEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.PaperEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.ChatRoomEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.ChatMessageEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.MasterPointEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.InterestsEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.BeaconEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.SearchKeyEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.IceBreakerFriendsEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.IceBreakerLeaderBoardEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.SurveyEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.BadgeEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.BadgeRuleEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.UserBadgeEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.GameEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.ScavengerEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.ScavengerGroupDetailEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.GameListEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.ScavengerWinnersEntityDao;
import sg.edu.smu.livelabs.mobicom.models.data.InboxEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 9): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 9;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        EventEntityDao.createTable(db, ifNotExists);
        GameEventEntityDao.createTable(db, ifNotExists);
        PaperEventEntityDao.createTable(db, ifNotExists);
        CommentEntityDao.createTable(db, ifNotExists);
        TopicEntityDao.createTable(db, ifNotExists);
        AttendeeEntityDao.createTable(db, ifNotExists);
        PaperEntityDao.createTable(db, ifNotExists);
        ChatRoomEntityDao.createTable(db, ifNotExists);
        ChatMessageEntityDao.createTable(db, ifNotExists);
        MasterPointEntityDao.createTable(db, ifNotExists);
        InterestsEntityDao.createTable(db, ifNotExists);
        BeaconEntityDao.createTable(db, ifNotExists);
        SearchKeyEntityDao.createTable(db, ifNotExists);
        IceBreakerFriendsEntityDao.createTable(db, ifNotExists);
        IceBreakerLeaderBoardEntityDao.createTable(db, ifNotExists);
        SurveyEntityDao.createTable(db, ifNotExists);
        BadgeEntityDao.createTable(db, ifNotExists);
        BadgeRuleEntityDao.createTable(db, ifNotExists);
        UserBadgeEntityDao.createTable(db, ifNotExists);
        GameEntityDao.createTable(db, ifNotExists);
        ScavengerEntityDao.createTable(db, ifNotExists);
        ScavengerGroupDetailEntityDao.createTable(db, ifNotExists);
        GameListEntityDao.createTable(db, ifNotExists);
        ScavengerWinnersEntityDao.createTable(db, ifNotExists);
        InboxEntityDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        EventEntityDao.dropTable(db, ifExists);
        GameEventEntityDao.dropTable(db, ifExists);
        PaperEventEntityDao.dropTable(db, ifExists);
        CommentEntityDao.dropTable(db, ifExists);
        TopicEntityDao.dropTable(db, ifExists);
        AttendeeEntityDao.dropTable(db, ifExists);
        PaperEntityDao.dropTable(db, ifExists);
        ChatRoomEntityDao.dropTable(db, ifExists);
        ChatMessageEntityDao.dropTable(db, ifExists);
        MasterPointEntityDao.dropTable(db, ifExists);
        InterestsEntityDao.dropTable(db, ifExists);
        BeaconEntityDao.dropTable(db, ifExists);
        SearchKeyEntityDao.dropTable(db, ifExists);
        IceBreakerFriendsEntityDao.dropTable(db, ifExists);
        IceBreakerLeaderBoardEntityDao.dropTable(db, ifExists);
        SurveyEntityDao.dropTable(db, ifExists);
        BadgeEntityDao.dropTable(db, ifExists);
        BadgeRuleEntityDao.dropTable(db, ifExists);
        UserBadgeEntityDao.dropTable(db, ifExists);
        GameEntityDao.dropTable(db, ifExists);
        ScavengerEntityDao.dropTable(db, ifExists);
        ScavengerGroupDetailEntityDao.dropTable(db, ifExists);
        GameListEntityDao.dropTable(db, ifExists);
        ScavengerWinnersEntityDao.dropTable(db, ifExists);
        InboxEntityDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(EventEntityDao.class);
        registerDaoClass(GameEventEntityDao.class);
        registerDaoClass(PaperEventEntityDao.class);
        registerDaoClass(CommentEntityDao.class);
        registerDaoClass(TopicEntityDao.class);
        registerDaoClass(AttendeeEntityDao.class);
        registerDaoClass(PaperEntityDao.class);
        registerDaoClass(ChatRoomEntityDao.class);
        registerDaoClass(ChatMessageEntityDao.class);
        registerDaoClass(MasterPointEntityDao.class);
        registerDaoClass(InterestsEntityDao.class);
        registerDaoClass(BeaconEntityDao.class);
        registerDaoClass(SearchKeyEntityDao.class);
        registerDaoClass(IceBreakerFriendsEntityDao.class);
        registerDaoClass(IceBreakerLeaderBoardEntityDao.class);
        registerDaoClass(SurveyEntityDao.class);
        registerDaoClass(BadgeEntityDao.class);
        registerDaoClass(BadgeRuleEntityDao.class);
        registerDaoClass(UserBadgeEntityDao.class);
        registerDaoClass(GameEntityDao.class);
        registerDaoClass(ScavengerEntityDao.class);
        registerDaoClass(ScavengerGroupDetailEntityDao.class);
        registerDaoClass(GameListEntityDao.class);
        registerDaoClass(ScavengerWinnersEntityDao.class);
        registerDaoClass(InboxEntityDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
