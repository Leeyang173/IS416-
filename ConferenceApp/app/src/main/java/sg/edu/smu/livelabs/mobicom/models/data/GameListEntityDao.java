package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.GameListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_LIST_ENTITY".
*/
public class GameListEntityDao extends AbstractDao<GameListEntity, Long> {

    public static final String TABLENAME = "GAME_LIST_ENTITY";

    /**
     * Properties of entity GameListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GameName = new Property(1, String.class, "gameName", false, "GAME_NAME");
        public final static Property Keyword = new Property(2, String.class, "keyword", false, "KEYWORD");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property ImageURL = new Property(4, String.class, "imageURL", false, "IMAGE_URL");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property InsertTime = new Property(6, java.util.Date.class, "insertTime", false, "INSERT_TIME");
        public final static Property LastUpdate = new Property(7, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
    };


    public GameListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GameListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_LIST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"GAME_NAME\" TEXT," + // 1: gameName
                "\"KEYWORD\" TEXT," + // 2: keyword
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"IMAGE_URL\" TEXT," + // 4: imageURL
                "\"STATUS\" TEXT," + // 5: status
                "\"INSERT_TIME\" INTEGER," + // 6: insertTime
                "\"LAST_UPDATE\" INTEGER);"); // 7: lastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(2, gameName);
        }
 
        String keyword = entity.getKeyword();
        if (keyword != null) {
            stmt.bindString(3, keyword);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(5, imageURL);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        java.util.Date insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindLong(7, insertTime.getTime());
        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(8, lastUpdate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameListEntity readEntity(Cursor cursor, int offset) {
        GameListEntity entity = new GameListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageURL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // insertTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // lastUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKeyword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInsertTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLastUpdate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
