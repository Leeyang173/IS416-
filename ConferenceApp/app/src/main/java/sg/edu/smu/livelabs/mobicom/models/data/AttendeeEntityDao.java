package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.AttendeeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDEE_ENTITY".
*/
public class AttendeeEntityDao extends AbstractDao<AttendeeEntity, Long> {

    public static final String TABLENAME = "ATTENDEE_ENTITY";

    /**
     * Properties of entity AttendeeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UID = new Property(1, Long.class, "UID", false, "UID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property FirstName = new Property(3, String.class, "firstName", false, "FIRST_NAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property UserHandle = new Property(5, String.class, "userHandle", false, "USER_HANDLE");
        public final static Property Role = new Property(6, String.class, "role", false, "ROLE");
        public final static Property Designation = new Property(7, String.class, "designation", false, "DESIGNATION");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
        public final static Property Avatar = new Property(9, String.class, "avatar", false, "AVATAR");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property RegisterTime = new Property(11, java.util.Date.class, "registerTime", false, "REGISTER_TIME");
        public final static Property Star = new Property(12, Boolean.class, "star", false, "STAR");
        public final static Property Interests = new Property(13, String.class, "interests", false, "INTERESTS");
    };


    public AttendeeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AttendeeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDEE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"UID\" INTEGER UNIQUE ," + // 1: UID
                "\"NAME\" TEXT," + // 2: name
                "\"FIRST_NAME\" TEXT," + // 3: firstName
                "\"EMAIL\" TEXT," + // 4: email
                "\"USER_HANDLE\" TEXT," + // 5: userHandle
                "\"ROLE\" TEXT," + // 6: role
                "\"DESIGNATION\" TEXT," + // 7: designation
                "\"DESCRIPTION\" TEXT," + // 8: description
                "\"AVATAR\" TEXT," + // 9: avatar
                "\"STATUS\" TEXT," + // 10: status
                "\"REGISTER_TIME\" INTEGER," + // 11: registerTime
                "\"STAR\" INTEGER," + // 12: star
                "\"INTERESTS\" TEXT);"); // 13: interests
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_UID ON ATTENDEE_ENTITY" +
                " (\"UID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_NAME ON ATTENDEE_ENTITY" +
                " (\"NAME\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_FIRST_NAME ON ATTENDEE_ENTITY" +
                " (\"FIRST_NAME\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_EMAIL ON ATTENDEE_ENTITY" +
                " (\"EMAIL\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_USER_HANDLE ON ATTENDEE_ENTITY" +
                " (\"USER_HANDLE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_ROLE ON ATTENDEE_ENTITY" +
                " (\"ROLE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_DESIGNATION ON ATTENDEE_ENTITY" +
                " (\"DESIGNATION\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_DESCRIPTION ON ATTENDEE_ENTITY" +
                " (\"DESCRIPTION\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_STATUS ON ATTENDEE_ENTITY" +
                " (\"STATUS\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_STAR ON ATTENDEE_ENTITY" +
                " (\"STAR\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ATTENDEE_ENTITY_INTERESTS ON ATTENDEE_ENTITY" +
                " (\"INTERESTS\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDEE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AttendeeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long UID = entity.getUID();
        if (UID != null) {
            stmt.bindLong(2, UID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String userHandle = entity.getUserHandle();
        if (userHandle != null) {
            stmt.bindString(6, userHandle);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(7, role);
        }
 
        String designation = entity.getDesignation();
        if (designation != null) {
            stmt.bindString(8, designation);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        java.util.Date registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(12, registerTime.getTime());
        }
 
        Boolean star = entity.getStar();
        if (star != null) {
            stmt.bindLong(13, star ? 1L: 0L);
        }
 
        String interests = entity.getInterests();
        if (interests != null) {
            stmt.bindString(14, interests);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AttendeeEntity readEntity(Cursor cursor, int offset) {
        AttendeeEntity entity = new AttendeeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firstName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userHandle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // role
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // designation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // description
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // registerTime
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // star
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // interests
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AttendeeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserHandle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRole(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDesignation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRegisterTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setStar(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setInterests(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AttendeeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AttendeeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
