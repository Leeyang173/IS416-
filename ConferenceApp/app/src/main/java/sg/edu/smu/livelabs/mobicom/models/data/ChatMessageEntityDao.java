package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.ChatMessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_ENTITY".
*/
public class ChatMessageEntityDao extends AbstractDao<ChatMessageEntity, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_ENTITY";

    /**
     * Properties of entity ChatMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msg = new Property(1, String.class, "msg", false, "MSG");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property LastUpdated = new Property(3, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
        public final static Property ChatRoomId = new Property(4, Long.class, "chatRoomId", false, "CHAT_ROOM_ID");
        public final static Property Owner = new Property(5, Long.class, "owner", false, "OWNER");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property ServerId = new Property(7, Long.class, "serverId", false, "SERVER_ID");
        public final static Property IsNotification = new Property(8, Boolean.class, "isNotification", false, "IS_NOTIFICATION");
    };


    public ChatMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG\" TEXT," + // 1: msg
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"LAST_UPDATED\" INTEGER," + // 3: lastUpdated
                "\"CHAT_ROOM_ID\" INTEGER," + // 4: chatRoomId
                "\"OWNER\" INTEGER," + // 5: owner
                "\"STATUS\" INTEGER," + // 6: status
                "\"SERVER_ID\" INTEGER," + // 7: serverId
                "\"IS_NOTIFICATION\" INTEGER);"); // 8: isNotification
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_ENTITY_LAST_UPDATED ON CHAT_MESSAGE_ENTITY" +
                " (\"LAST_UPDATED\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_ENTITY_CHAT_ROOM_ID ON CHAT_MESSAGE_ENTITY" +
                " (\"CHAT_ROOM_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_MESSAGE_ENTITY_OWNER ON CHAT_MESSAGE_ENTITY" +
                " (\"OWNER\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(4, lastUpdated.getTime());
        }
 
        Long chatRoomId = entity.getChatRoomId();
        if (chatRoomId != null) {
            stmt.bindLong(5, chatRoomId);
        }
 
        Long owner = entity.getOwner();
        if (owner != null) {
            stmt.bindLong(6, owner);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(8, serverId);
        }
 
        Boolean isNotification = entity.getIsNotification();
        if (isNotification != null) {
            stmt.bindLong(9, isNotification ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMessageEntity readEntity(Cursor cursor, int offset) {
        ChatMessageEntity entity = new ChatMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastUpdated
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // chatRoomId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // owner
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // serverId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isNotification
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLastUpdated(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setChatRoomId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOwner(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setServerId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsNotification(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
