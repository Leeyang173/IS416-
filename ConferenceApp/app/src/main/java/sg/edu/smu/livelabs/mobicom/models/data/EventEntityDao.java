package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.EventEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_ENTITY".
*/
public class EventEntityDao extends AbstractDao<EventEntity, Long> {

    public static final String TABLENAME = "EVENT_ENTITY";

    /**
     * Properties of entity EventEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, Long.class, "serverId", false, "SERVER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property KeynoteUserId = new Property(4, String.class, "keynoteUserId", false, "KEYNOTE_USER_ID");
        public final static Property EventDate = new Property(5, Long.class, "eventDate", false, "EVENT_DATE");
        public final static Property StartTime = new Property(6, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(7, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Room = new Property(8, String.class, "room", false, "ROOM");
        public final static Property ParentId = new Property(9, Long.class, "parentId", false, "PARENT_ID");
        public final static Property PaperId = new Property(10, Long.class, "paperId", false, "PAPER_ID");
        public final static Property EventType = new Property(11, String.class, "eventType", false, "EVENT_TYPE");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
        public final static Property Rating = new Property(13, Double.class, "rating", false, "RATING");
        public final static Property CorrectAnswers = new Property(14, Double.class, "correctAnswers", false, "CORRECT_ANSWERS");
        public final static Property CommentCount = new Property(15, Double.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property MyRate = new Property(16, Integer.class, "myRate", false, "MY_RATE");
        public final static Property Checked = new Property(17, Boolean.class, "checked", false, "CHECKED");
        public final static Property Synced = new Property(18, Boolean.class, "synced", false, "SYNCED");
        public final static Property TopicHandle = new Property(19, String.class, "topicHandle", false, "TOPIC_HANDLE");
        public final static Property KeynoteUserDetail = new Property(20, String.class, "keynoteUserDetail", false, "KEYNOTE_USER_DETAIL");
        public final static Property RatingQuizStatus = new Property(21, String.class, "ratingQuizStatus", false, "RATING_QUIZ_STATUS");
        public final static Property MyLike = new Property(22, Boolean.class, "myLike", false, "MY_LIKE");
        public final static Property LikesCount = new Property(23, Integer.class, "likesCount", false, "LIKES_COUNT");
    };


    public EventEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EventEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"SERVER_ID\" INTEGER," + // 1: serverId
                "\"TITLE\" TEXT," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"KEYNOTE_USER_ID\" TEXT," + // 4: keynoteUserId
                "\"EVENT_DATE\" INTEGER," + // 5: eventDate
                "\"START_TIME\" INTEGER," + // 6: startTime
                "\"END_TIME\" INTEGER," + // 7: endTime
                "\"ROOM\" TEXT," + // 8: room
                "\"PARENT_ID\" INTEGER," + // 9: parentId
                "\"PAPER_ID\" INTEGER," + // 10: paperId
                "\"EVENT_TYPE\" TEXT," + // 11: eventType
                "\"STATUS\" TEXT," + // 12: status
                "\"RATING\" REAL," + // 13: rating
                "\"CORRECT_ANSWERS\" REAL," + // 14: correctAnswers
                "\"COMMENT_COUNT\" REAL," + // 15: commentCount
                "\"MY_RATE\" INTEGER," + // 16: myRate
                "\"CHECKED\" INTEGER," + // 17: checked
                "\"SYNCED\" INTEGER," + // 18: synced
                "\"TOPIC_HANDLE\" TEXT," + // 19: topicHandle
                "\"KEYNOTE_USER_DETAIL\" TEXT," + // 20: keynoteUserDetail
                "\"RATING_QUIZ_STATUS\" TEXT," + // 21: ratingQuizStatus
                "\"MY_LIKE\" INTEGER," + // 22: myLike
                "\"LIKES_COUNT\" INTEGER);"); // 23: likesCount
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_SERVER_ID ON EVENT_ENTITY" +
                " (\"SERVER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_EVENT_DATE ON EVENT_ENTITY" +
                " (\"EVENT_DATE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_START_TIME ON EVENT_ENTITY" +
                " (\"START_TIME\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_PARENT_ID ON EVENT_ENTITY" +
                " (\"PARENT_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_PAPER_ID ON EVENT_ENTITY" +
                " (\"PAPER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_EVENT_TYPE ON EVENT_ENTITY" +
                " (\"EVENT_TYPE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_STATUS ON EVENT_ENTITY" +
                " (\"STATUS\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_CHECKED ON EVENT_ENTITY" +
                " (\"CHECKED\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_SYNCED ON EVENT_ENTITY" +
                " (\"SYNCED\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_MY_LIKE ON EVENT_ENTITY" +
                " (\"MY_LIKE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EVENT_ENTITY_LIKES_COUNT ON EVENT_ENTITY" +
                " (\"LIKES_COUNT\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(2, serverId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String keynoteUserId = entity.getKeynoteUserId();
        if (keynoteUserId != null) {
            stmt.bindString(5, keynoteUserId);
        }
 
        Long eventDate = entity.getEventDate();
        if (eventDate != null) {
            stmt.bindLong(6, eventDate);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(7, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(8, endTime.getTime());
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(9, room);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(10, parentId);
        }
 
        Long paperId = entity.getPaperId();
        if (paperId != null) {
            stmt.bindLong(11, paperId);
        }
 
        String eventType = entity.getEventType();
        if (eventType != null) {
            stmt.bindString(12, eventType);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(14, rating);
        }
 
        Double correctAnswers = entity.getCorrectAnswers();
        if (correctAnswers != null) {
            stmt.bindDouble(15, correctAnswers);
        }
 
        Double commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindDouble(16, commentCount);
        }
 
        Integer myRate = entity.getMyRate();
        if (myRate != null) {
            stmt.bindLong(17, myRate);
        }
 
        Boolean checked = entity.getChecked();
        if (checked != null) {
            stmt.bindLong(18, checked ? 1L: 0L);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(19, synced ? 1L: 0L);
        }
 
        String topicHandle = entity.getTopicHandle();
        if (topicHandle != null) {
            stmt.bindString(20, topicHandle);
        }
 
        String keynoteUserDetail = entity.getKeynoteUserDetail();
        if (keynoteUserDetail != null) {
            stmt.bindString(21, keynoteUserDetail);
        }
 
        String ratingQuizStatus = entity.getRatingQuizStatus();
        if (ratingQuizStatus != null) {
            stmt.bindString(22, ratingQuizStatus);
        }
 
        Boolean myLike = entity.getMyLike();
        if (myLike != null) {
            stmt.bindLong(23, myLike ? 1L: 0L);
        }
 
        Integer likesCount = entity.getLikesCount();
        if (likesCount != null) {
            stmt.bindLong(24, likesCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EventEntity readEntity(Cursor cursor, int offset) {
        EventEntity entity = new EventEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keynoteUserId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // eventDate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // startTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // endTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // room
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // parentId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // paperId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // eventType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // rating
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // correctAnswers
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // commentCount
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // myRate
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // checked
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // synced
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // topicHandle
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // keynoteUserDetail
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // ratingQuizStatus
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // myLike
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23) // likesCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EventEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeynoteUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEventDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStartTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setRoom(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParentId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPaperId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setEventType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRating(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setCorrectAnswers(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setCommentCount(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setMyRate(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setChecked(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setSynced(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setTopicHandle(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setKeynoteUserDetail(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRatingQuizStatus(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMyLike(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setLikesCount(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EventEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EventEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
