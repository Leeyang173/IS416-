package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.IceBreakerFriendsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ICE_BREAKER_FRIENDS_ENTITY".
*/
public class IceBreakerFriendsEntityDao extends AbstractDao<IceBreakerFriendsEntity, Long> {

    public static final String TABLENAME = "ICE_BREAKER_FRIENDS_ENTITY";

    /**
     * Properties of entity IceBreakerFriendsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property EmailId = new Property(3, String.class, "emailId", false, "EMAIL_ID");
        public final static Property Desig = new Property(4, String.class, "desig", false, "DESIG");
        public final static Property AvatarId = new Property(5, String.class, "avatarId", false, "AVATAR_ID");
        public final static Property QrCode = new Property(6, String.class, "qrCode", false, "QR_CODE");
    };


    public IceBreakerFriendsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public IceBreakerFriendsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ICE_BREAKER_FRIENDS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"NAME\" TEXT," + // 2: name
                "\"EMAIL_ID\" TEXT," + // 3: emailId
                "\"DESIG\" TEXT," + // 4: desig
                "\"AVATAR_ID\" TEXT," + // 5: avatarId
                "\"QR_CODE\" TEXT);"); // 6: qrCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ICE_BREAKER_FRIENDS_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IceBreakerFriendsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String emailId = entity.getEmailId();
        if (emailId != null) {
            stmt.bindString(4, emailId);
        }
 
        String desig = entity.getDesig();
        if (desig != null) {
            stmt.bindString(5, desig);
        }
 
        String avatarId = entity.getAvatarId();
        if (avatarId != null) {
            stmt.bindString(6, avatarId);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(7, qrCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IceBreakerFriendsEntity readEntity(Cursor cursor, int offset) {
        IceBreakerFriendsEntity entity = new IceBreakerFriendsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emailId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desig
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatarId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // qrCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IceBreakerFriendsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmailId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesig(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatarId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQrCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IceBreakerFriendsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IceBreakerFriendsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
