package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.BadgeRuleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BADGE_RULE_ENTITY".
*/
public class BadgeRuleEntityDao extends AbstractDao<BadgeRuleEntity, Long> {

    public static final String TABLENAME = "BADGE_RULE_ENTITY";

    /**
     * Properties of entity BadgeRuleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BadgesId = new Property(1, Long.class, "badgesId", false, "BADGES_ID");
        public final static Property Count = new Property(2, Integer.class, "count", false, "COUNT");
        public final static Property IsUnlocked = new Property(3, Boolean.class, "isUnlocked", false, "IS_UNLOCKED");
        public final static Property CompleteBadgeToUnlock = new Property(4, String.class, "completeBadgeToUnlock", false, "COMPLETE_BADGE_TO_UNLOCK");
    };


    public BadgeRuleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BadgeRuleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BADGE_RULE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"BADGES_ID\" INTEGER," + // 1: badgesId
                "\"COUNT\" INTEGER," + // 2: count
                "\"IS_UNLOCKED\" INTEGER," + // 3: isUnlocked
                "\"COMPLETE_BADGE_TO_UNLOCK\" TEXT);"); // 4: completeBadgeToUnlock
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BADGE_RULE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BadgeRuleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long badgesId = entity.getBadgesId();
        if (badgesId != null) {
            stmt.bindLong(2, badgesId);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }
 
        Boolean isUnlocked = entity.getIsUnlocked();
        if (isUnlocked != null) {
            stmt.bindLong(4, isUnlocked ? 1L: 0L);
        }
 
        String completeBadgeToUnlock = entity.getCompleteBadgeToUnlock();
        if (completeBadgeToUnlock != null) {
            stmt.bindString(5, completeBadgeToUnlock);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BadgeRuleEntity readEntity(Cursor cursor, int offset) {
        BadgeRuleEntity entity = new BadgeRuleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // badgesId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isUnlocked
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // completeBadgeToUnlock
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BadgeRuleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBadgesId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIsUnlocked(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setCompleteBadgeToUnlock(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BadgeRuleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BadgeRuleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
