package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.UserBadgeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BADGE_ENTITY".
*/
public class UserBadgeEntityDao extends AbstractDao<UserBadgeEntity, Long> {

    public static final String TABLENAME = "USER_BADGE_ENTITY";

    /**
     * Properties of entity UserBadgeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BadgeId = new Property(1, Long.class, "badgeId", false, "BADGE_ID");
        public final static Property BadgeChildId = new Property(2, Long.class, "badgeChildId", false, "BADGE_CHILD_ID");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
        public final static Property InsertTime = new Property(4, java.util.Date.class, "insertTime", false, "INSERT_TIME");
    };


    public UserBadgeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserBadgeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BADGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"BADGE_ID\" INTEGER," + // 1: badgeId
                "\"BADGE_CHILD_ID\" INTEGER," + // 2: badgeChildId
                "\"USER_ID\" INTEGER," + // 3: userId
                "\"INSERT_TIME\" INTEGER);"); // 4: insertTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BADGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserBadgeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long badgeId = entity.getBadgeId();
        if (badgeId != null) {
            stmt.bindLong(2, badgeId);
        }
 
        Long badgeChildId = entity.getBadgeChildId();
        if (badgeChildId != null) {
            stmt.bindLong(3, badgeChildId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        java.util.Date insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindLong(5, insertTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserBadgeEntity readEntity(Cursor cursor, int offset) {
        UserBadgeEntity entity = new UserBadgeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // badgeId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // badgeChildId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // insertTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserBadgeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBadgeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBadgeChildId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setInsertTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserBadgeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserBadgeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
