package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.PaperEventEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAPER_EVENT_ENTITY".
*/
public class PaperEventEntityDao extends AbstractDao<PaperEventEntity, Long> {

    public static final String TABLENAME = "PAPER_EVENT_ENTITY";

    /**
     * Properties of entity PaperEventEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, Long.class, "ServerId", false, "SERVER_ID");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property PdfLink = new Property(3, String.class, "pdfLink", false, "PDF_LINK");
        public final static Property EpubLink = new Property(4, String.class, "epubLink", false, "EPUB_LINK");
        public final static Property Authors = new Property(5, String.class, "authors", false, "AUTHORS");
        public final static Property EventTime = new Property(6, java.util.Date.class, "eventTime", false, "EVENT_TIME");
        public final static Property SessionServerID = new Property(7, Long.class, "sessionServerID", false, "SESSION_SERVER_ID");
        public final static Property SessionTile = new Property(8, String.class, "sessionTile", false, "SESSION_TILE");
        public final static Property SessionDescription = new Property(9, String.class, "sessionDescription", false, "SESSION_DESCRIPTION");
    };


    public PaperEventEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PaperEventEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAPER_EVENT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"SERVER_ID\" INTEGER," + // 1: ServerId
                "\"TITLE\" TEXT," + // 2: Title
                "\"PDF_LINK\" TEXT," + // 3: pdfLink
                "\"EPUB_LINK\" TEXT," + // 4: epubLink
                "\"AUTHORS\" TEXT," + // 5: authors
                "\"EVENT_TIME\" INTEGER," + // 6: eventTime
                "\"SESSION_SERVER_ID\" INTEGER," + // 7: sessionServerID
                "\"SESSION_TILE\" TEXT," + // 8: sessionTile
                "\"SESSION_DESCRIPTION\" TEXT);"); // 9: sessionDescription
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PAPER_EVENT_ENTITY_SERVER_ID ON PAPER_EVENT_ENTITY" +
                " (\"SERVER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_PAPER_EVENT_ENTITY_EVENT_TIME ON PAPER_EVENT_ENTITY" +
                " (\"EVENT_TIME\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_PAPER_EVENT_ENTITY_SESSION_SERVER_ID ON PAPER_EVENT_ENTITY" +
                " (\"SESSION_SERVER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAPER_EVENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PaperEventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(2, ServerId);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String pdfLink = entity.getPdfLink();
        if (pdfLink != null) {
            stmt.bindString(4, pdfLink);
        }
 
        String epubLink = entity.getEpubLink();
        if (epubLink != null) {
            stmt.bindString(5, epubLink);
        }
 
        String authors = entity.getAuthors();
        if (authors != null) {
            stmt.bindString(6, authors);
        }
 
        java.util.Date eventTime = entity.getEventTime();
        if (eventTime != null) {
            stmt.bindLong(7, eventTime.getTime());
        }
 
        Long sessionServerID = entity.getSessionServerID();
        if (sessionServerID != null) {
            stmt.bindLong(8, sessionServerID);
        }
 
        String sessionTile = entity.getSessionTile();
        if (sessionTile != null) {
            stmt.bindString(9, sessionTile);
        }
 
        String sessionDescription = entity.getSessionDescription();
        if (sessionDescription != null) {
            stmt.bindString(10, sessionDescription);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PaperEventEntity readEntity(Cursor cursor, int offset) {
        PaperEventEntity entity = new PaperEventEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pdfLink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // epubLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // authors
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // eventTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // sessionServerID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sessionTile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // sessionDescription
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PaperEventEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPdfLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEpubLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthors(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEventTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSessionServerID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSessionTile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSessionDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PaperEventEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PaperEventEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
