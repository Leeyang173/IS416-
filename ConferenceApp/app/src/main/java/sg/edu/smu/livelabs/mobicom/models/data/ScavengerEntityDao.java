package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.ScavengerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCAVENGER_ENTITY".
*/
public class ScavengerEntityDao extends AbstractDao<ScavengerEntity, Long> {

    public static final String TABLENAME = "SCAVENGER_ENTITY";

    /**
     * Properties of entity ScavengerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HuntId = new Property(1, Long.class, "huntId", false, "HUNT_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property IconId = new Property(3, String.class, "iconId", false, "ICON_ID");
        public final static Property StartTime = new Property(4, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property IsStarted = new Property(7, Boolean.class, "isStarted", false, "IS_STARTED");
        public final static Property IsCompleted = new Property(8, Boolean.class, "isCompleted", false, "IS_COMPLETED");
        public final static Property IsSubmitted = new Property(9, Boolean.class, "isSubmitted", false, "IS_SUBMITTED");
        public final static Property Photo = new Property(10, String.class, "photo", false, "PHOTO");
        public final static Property UserReequiredCount = new Property(11, Integer.class, "userReequiredCount", false, "USER_REEQUIRED_COUNT");
        public final static Property QrCode = new Property(12, String.class, "qrCode", false, "QR_CODE");
        public final static Property Type = new Property(13, String.class, "type", false, "TYPE");
        public final static Property InsertTime = new Property(14, java.util.Date.class, "insertTime", false, "INSERT_TIME");
        public final static Property LastUpdate = new Property(15, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
    };


    public ScavengerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScavengerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCAVENGER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"HUNT_ID\" INTEGER," + // 1: huntId
                "\"TITLE\" TEXT," + // 2: title
                "\"ICON_ID\" TEXT," + // 3: iconId
                "\"START_TIME\" INTEGER," + // 4: startTime
                "\"END_TIME\" INTEGER," + // 5: endTime
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"IS_STARTED\" INTEGER," + // 7: isStarted
                "\"IS_COMPLETED\" INTEGER," + // 8: isCompleted
                "\"IS_SUBMITTED\" INTEGER," + // 9: isSubmitted
                "\"PHOTO\" TEXT," + // 10: photo
                "\"USER_REEQUIRED_COUNT\" INTEGER," + // 11: userReequiredCount
                "\"QR_CODE\" TEXT," + // 12: qrCode
                "\"TYPE\" TEXT," + // 13: type
                "\"INSERT_TIME\" INTEGER," + // 14: insertTime
                "\"LAST_UPDATE\" INTEGER);"); // 15: lastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCAVENGER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScavengerEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long huntId = entity.getHuntId();
        if (huntId != null) {
            stmt.bindLong(2, huntId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String iconId = entity.getIconId();
        if (iconId != null) {
            stmt.bindString(4, iconId);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(6, endTime.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        Boolean isStarted = entity.getIsStarted();
        if (isStarted != null) {
            stmt.bindLong(8, isStarted ? 1L: 0L);
        }
 
        Boolean isCompleted = entity.getIsCompleted();
        if (isCompleted != null) {
            stmt.bindLong(9, isCompleted ? 1L: 0L);
        }
 
        Boolean isSubmitted = entity.getIsSubmitted();
        if (isSubmitted != null) {
            stmt.bindLong(10, isSubmitted ? 1L: 0L);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(11, photo);
        }
 
        Integer userReequiredCount = entity.getUserReequiredCount();
        if (userReequiredCount != null) {
            stmt.bindLong(12, userReequiredCount);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(13, qrCode);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(14, type);
        }
 
        java.util.Date insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindLong(15, insertTime.getTime());
        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(16, lastUpdate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ScavengerEntity readEntity(Cursor cursor, int offset) {
        ScavengerEntity entity = new ScavengerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // huntId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // iconId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // startTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isStarted
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isCompleted
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isSubmitted
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photo
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // userReequiredCount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // qrCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // type
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // insertTime
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)) // lastUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScavengerEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHuntId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIconId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsStarted(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsCompleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsSubmitted(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setPhoto(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserReequiredCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setQrCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInsertTime(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setLastUpdate(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScavengerEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ScavengerEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
