package sg.edu.smu.livelabs.mobicom.models.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sg.edu.smu.livelabs.mobicom.models.data.BeaconEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEACON_ENTITY".
*/
public class BeaconEntityDao extends AbstractDao<BeaconEntity, Long> {

    public static final String TABLENAME = "BEACON_ENTITY";

    /**
     * Properties of entity BeaconEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Major = new Property(2, String.class, "major", false, "MAJOR");
        public final static Property Minor = new Property(3, String.class, "minor", false, "MINOR");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property PdfUrl = new Property(5, String.class, "pdfUrl", false, "PDF_URL");
        public final static Property PaperName = new Property(6, String.class, "paperName", false, "PAPER_NAME");
        public final static Property Rate = new Property(7, Integer.class, "rate", false, "RATE");
        public final static Property CapChar = new Property(8, Integer.class, "capChar", false, "CAP_CHAR");
        public final static Property AvgRating = new Property(9, Double.class, "avgRating", false, "AVG_RATING");
        public final static Property HasViewed = new Property(10, Boolean.class, "hasViewed", false, "HAS_VIEWED");
        public final static Property LastUpdated = new Property(11, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    };


    public BeaconEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BeaconEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEACON_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"MAJOR\" TEXT," + // 2: major
                "\"MINOR\" TEXT," + // 3: minor
                "\"URL\" TEXT," + // 4: url
                "\"PDF_URL\" TEXT," + // 5: pdfUrl
                "\"PAPER_NAME\" TEXT," + // 6: paperName
                "\"RATE\" INTEGER," + // 7: rate
                "\"CAP_CHAR\" INTEGER," + // 8: capChar
                "\"AVG_RATING\" REAL," + // 9: avgRating
                "\"HAS_VIEWED\" INTEGER," + // 10: hasViewed
                "\"LAST_UPDATED\" INTEGER);"); // 11: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEACON_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BeaconEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(3, major);
        }
 
        String minor = entity.getMinor();
        if (minor != null) {
            stmt.bindString(4, minor);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String pdfUrl = entity.getPdfUrl();
        if (pdfUrl != null) {
            stmt.bindString(6, pdfUrl);
        }
 
        String paperName = entity.getPaperName();
        if (paperName != null) {
            stmt.bindString(7, paperName);
        }
 
        Integer rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(8, rate);
        }
 
        Integer capChar = entity.getCapChar();
        if (capChar != null) {
            stmt.bindLong(9, capChar);
        }
 
        Double avgRating = entity.getAvgRating();
        if (avgRating != null) {
            stmt.bindDouble(10, avgRating);
        }
 
        Boolean hasViewed = entity.getHasViewed();
        if (hasViewed != null) {
            stmt.bindLong(11, hasViewed ? 1L: 0L);
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(12, lastUpdated.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BeaconEntity readEntity(Cursor cursor, int offset) {
        BeaconEntity entity = new BeaconEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // major
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // minor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pdfUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // paperName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // rate
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // capChar
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // avgRating
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // hasViewed
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // lastUpdated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BeaconEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMajor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMinor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPdfUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPaperName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRate(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCapChar(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAvgRating(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setHasViewed(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setLastUpdated(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BeaconEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BeaconEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
